# -*- coding: utf-8 -*-
"""bar races.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yFertlQFdLs-YcsO8A9Qk0P6WESdjpLS
"""

import pandas as pd
import plotly.express as px
import streamlit as st

# Lire le fichier CSV
df = pd.read_csv('/content/bquxjob_4e6b6dc1_193867d3aa0.csv')

df_2023 = df[df['fin_saison'] == 2023]
df_2023

# Filtrer les données pour les années 2012 à 2021
df_filtered = df[(df['fin_saison'] >= 2012) & (df['fin_saison'] <= 2021)]

# Grouper par année et région, puis calculer la moyenne du score économique
df_region_yearly_scores = df_filtered.groupby(['fin_saison', 'region'])['score_economique'].mean().reset_index()

# Créer un graphique à barres animé avec tri dynamique
fig = px.bar(df_region_yearly_scores,
             x='score_economique',
             y='region',
             color='region',
             animation_frame='fin_saison', # Animation par année
             title="Évolution des scores économiques par région (2012-2021)",
             labels={'fin_saison': 'Année', 'score_economique': 'Score Économique', 'region': 'Région'},
             orientation='h', # Barres horizontales
             range_x=[df_region_yearly_scores['score_economique'].min(), df_region_yearly_scores['score_economique'].max()],
             color_continuous_scale='Viridis',
             category_orders={'region': df_region_yearly_scores.groupby('region')['score_economique'].mean().sort_values(ascending=False).index.tolist()})

# Afficher le graphique dans Streamlit
st.plotly_chart(fig)

# Filtrer les données pour les années 2012 à 2023
df_filtered = df[(df['fin_saison'] >= 2012) & (df['fin_saison'] <= 2023)]

# Grouper par année et région, puis calculer la moyenne du score sportif
df_region_yearly_scores = df_filtered.groupby(['fin_saison', 'region'])['score_sportif'].mean().reset_index()

# Créer une nouvelle colonne pour gérer les scores égaux ou inférieurs à 0
df_region_yearly_scores['score_order'] = df_region_yearly_scores['score_sportif'].apply(
    lambda x: -1 if x <= 0 else x)  # Attribuer -1 aux scores <= 0, pour qu'ils soient traités à la fin

# Trier les données par score (d'abord les scores > 0, puis ceux <= 0)
df_region_yearly_scores_sorted = df_region_yearly_scores.sort_values(by=['fin_saison', 'score_order'], ascending=[True, False])

# Créer un classement dynamique par année
df_region_yearly_scores_sorted['rank'] = df_region_yearly_scores_sorted.groupby('fin_saison')['score_sportif'].rank(method='first', ascending=False)

# Garder uniquement le top 10 des régions chaque année
df_top10 = df_region_yearly_scores_sorted[df_region_yearly_scores_sorted['rank'] <= 10]

# Créer le graphique à barres animé avec tri dynamique
fig = px.bar(df_top10,
             x='score_sportif',
             y='region',
             color='region',
             animation_frame='fin_saison', # Animation par année
             title="Évolution des scores sportifs par région (2012-2023)",
             labels={'fin_saison': 'Année', 'score_sportif': 'Score Sportif', 'region': 'Région'},
             orientation='h', # Barres horizontales
             range_x=[df_top10['score_sportif'].min(), df_top10['score_sportif'].max()],
             color_continuous_scale='Viridis',
             category_orders={'region': df_top10.groupby('fin_saison')['score_sportif'].mean().sort_values(ascending=False).index.tolist()})

# Afficher le graphique dans Streamlit
st.plotly_chart(fig)
